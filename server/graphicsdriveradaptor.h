/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ../com.deepin.daemon.GraphicsDriver.xml -i graphicsdriverinterface.h -a graphicsdriveradaptor
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef GRAPHICSDRIVERADAPTOR_H
#define GRAPHICSDRIVERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "graphicsdriverinterface.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.daemon.GraphicsDriver
 */
class GraphicsDriverAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.daemon.GraphicsDriver")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.daemon.GraphicsDriver\">\n"
"    <signal name=\"removeDriverResult\">\n"
"      <arg direction=\"out\" type=\"i\"/>\n"
"    </signal>\n"
"    <signal name=\"installDriverResult\">\n"
"      <arg direction=\"out\" type=\"i\"/>\n"
"    </signal>\n"
"    <method name=\"getDeviceFlag\">\n"
"      <arg direction=\"out\" type=\"i\"/>\n"
"    </method>\n"
"    <method name=\"getDevice\">\n"
"      <arg direction=\"out\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"getInstallStatus\">\n"
"      <arg direction=\"out\" type=\"i\"/>\n"
"    </method>\n"
"    <method name=\"isTestSuccess\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"newDriver\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"OldDriver\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"reboot\"/>\n"
"    <method name=\"removeDriver\"/>\n"
"    <method name=\"installDriver\"/>\n"
"  </interface>\n"
        "")
public:
    GraphicsDriverAdaptor(QObject *parent);
    virtual ~GraphicsDriverAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    QString OldDriver();
    QStringList getDevice();
    int getDeviceFlag();
    int getInstallStatus();
    void installDriver();
    bool isTestSuccess();
    QString newDriver();
    void reboot();
    void removeDriver();
Q_SIGNALS: // SIGNALS
    void installDriverResult(int in0);
    void removeDriverResult(int in0);
};

#endif
